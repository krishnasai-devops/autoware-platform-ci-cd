name: CI/CD Pipeline

on:
  push:
    branches:
      - develop      # Dev environment
      - qa-release   # QA environment
      - main         # Production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || (github.ref_name == 'qa-release' && 'qa' || 'dev') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt


    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force

    - name: Prepare C++ Build
      run: |
        cd cpp_cruise_control
        mkdir -p build
        conan install . --output-folder=build --build=missing
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake
        cmake --build .


    - name: Run Unit Tests
      run: |
        python -m unittest discover -s tests

    - name: Download SonarCloud Build Wrapper
      run: |
        wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip build-wrapper-linux-x86.zip

    - name: Set up python & Conan
      run: |
        python3 -m pip install --upgrade pip
        pip install conan

    - name: Build C++ with build-wrapper
      run: |
        mkdir build && cd build
        conan install ..
        cmake ..
        ../build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir bw-output make


    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      with:
        args: >
          -Dsonar.projectKey=krishnasai-devops_autoware-platform-ci-cd
          -Dsonar.organization=krishnasai-devops
          -Dsonar.sources=.
          -Dsonar.cfamily.build-wrapper-output=bw-output
          -Dsonar.branch.name=${{ github.ref_name }}
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 

    - name: Snyk Open Source Scan
      uses: snyk/actions/node@master
      with:
        args: test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Conan Login to Artifactory
      run: |
        conan remote add artifactory ${{ secrets.CONAN_REPO_URL }} --force
        conan user -p ${{ secrets.ARTIFACTORY_CONAN_PASS }} -r artifactory ${{ secrets.ARTIFACTORY_CONAN_USER }}

    - name: Docker Build & Push to Artifactory
      run: |
        docker login ${{ secrets.DOCKER_REPO_URL }} -u ${{ secrets.ARTIFACTORY_DOCKER_USER }} -p ${{ secrets.ARTIFACTORY_DOCKER_PASS }}
        docker build -t cpp-service .
        docker tag cpp-service ${{ secrets.DOCKER_REPO_URL }}/cpp-service:1.0
        docker push ${{ secrets.DOCKER_REPO_URL }}/cpp-service:1.0

    - name: JIRA Transition Update
      run: |
        curl -u ${{ secrets.JIRA_USER }}:${{ secrets.JIRA_TOKEN }} \
             -X POST \
             -H "Content-Type: application/json" \
             --data '{"transition":{"id":"31"}}' \
             ${{ secrets.JIRA_BASE_URL }}/rest/api/2/issue/PROJ-123/transitions

